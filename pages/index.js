import SemesterSubjects from "../src/components/SemesterSubjects";
import { mechatronicsSubjects } from "../src/utils/mechatronicsSubjects";
import { HomeMain } from "../src/styles/home";
import { useEffect, useState } from "react";
import Head from "next/head";

const semesters = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];

const Home = () => {
  const [subjects, setSubjects] = useState(mechatronicsSubjects);
  const [totalCoursedHours, setTotalCoursedHours] = useState(0);

  const saveSubjectsState = (e) => {
    // e?.preventDefault();

    if(subjects) localStorage.setItem("subjectsState", JSON.stringify(subjects));
  }

  const getSubjectsState = async () => {
    if(window) {
      const savedSubjectsState = await localStorage.getItem("subjectsState");
      if(savedSubjectsState) setSubjects(JSON.parse(savedSubjectsState))
    }
  }

  useEffect(() => {
    getSubjectsState()
  }, [])

  useEffect(() => {
    if(subjects?.length > 0) {
      let count = 0;

      subjects.forEach(subject => {
        if(subject.completed && subject.available) count += subject.hours;
      })

      setTotalCoursedHours(count);
    }
  }, [subjects])

  const updateSubjects = (subject) => {
      const coursedSubjects = subjects?.filter(item => {
        if(item === subject && subject.completed) return false;
        if(item.preRequisites.includes(subject.name) && subject.completed) return false;
        return item.completed;
      }).map(o => o.name);

      if(!subject.completed) coursedSubjects.push(subject.name);
      let index;
      const newSubjects = subjects.map((item, itemIndex) => {
        if(item === subject) index = itemIndex;
        return item;
      });

      const response = newSubjects.map((item) => {
        let mustBeAvailable = true;
        item.preRequisites.forEach(preRequisite => {
          if(!(coursedSubjects.includes(preRequisite))) mustBeAvailable = false;
        });
        if(mustBeAvailable) {
          return {
            ...item,
            available: mustBeAvailable,
          }
        } else {
          return {
            ...item,
            available: false,
            completed: false
          }

        }
      })

      response[index].completed = !subject.completed;
      setSubjects(response);
    }

  return (
    <>
      <Head>
        <title>Grade Horária</title>
        <meta name="Grade Horária - Engenharia Mecatrônica" content="Generated by create next app" />
      </Head>
      <HomeMain>
        <h1>Estrutura curricular: Engenharia Mecatrônica - UFSJ</h1>
        <div>
          <h3>Carga horária cursada: {totalCoursedHours}h</h3>
        </div>
        <div 
          style={{ 
            display: "flex",
            justifyContent: "center",
            alignItems: "center",
            width: "100%",
            padding: "0 8px",
            gap: "48px",
            marginTop: "20px",
          }}>
          <div style={{ 
            display: "flex", 
            alignItems: "center", 
            justifyContent: "center", 
            gap: "10px",
            flexWrap: "wrap",
            height: "100%"
          }}>
            <h4>Legenda: </h4>
            <div style={{ display: "flex", gap: "10px" }}>
              <div style={{ display: "flex", alignItems: "center", gap: "5px" }}>
                <div style={{ minWidth: "20px", minHeight: "20px", background: "lightyellow", borderRadius: "5px" }}></div>
                <span>Disciplinas disponíveis</span>
              </div>
              <div style={{ display: "flex", alignItems: "center", gap: "5px" }}>
                <div style={{ minWidth: "20px", minHeight: "20px", background: "lightgreen", borderRadius: "5px" }}></div>
                <span>Disciplinas cursadas</span>
              </div>
              <div style={{ display: "flex", alignItems: "center", gap: "5px" }}>
                <div style={{ minWidth: "20px", minHeight: "20px", background: "lightcoral", borderRadius: "5px" }}></div>
                <span>Disciplinas indisponíveis</span>
              </div>
            </div>
          </div>
          
          <div>
            <button 
              onClick={saveSubjectsState}
              style={{ 
                border: "none",
                padding: "8px 24px",
                borderRadius: "8px",
                cursor: "pointer"
              }}
            >Salvar</button>
          </div>
        </div>
        <section style={{ width: "100%", display: "flex", flexWrap: "wrap" }}>
          {semesters.map(semester => <SemesterSubjects key={semester} semester={semester} subjects={subjects?.filter(subject => subject.semester === semester)} updateSubjects={updateSubjects} />)}
        </section>
      </HomeMain>
    </>
  );
};

export default Home;
